{
	"info": {
		"_postman_id": "0da3da65-24ab-4270-a184-be996ca5837f",
		"name": "ACC Reviews API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39082503"
	},
	"item": [
		{
			"name": "API References",
			"item": [
				{
					"name": "Run Firstly-Get Project ID",
					"item": [
						{
							"name": "GET one ACC account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// find the specified project and setup the environment variable \"hub_id\"",
											"const hub_name = pm.variables.get(\"hub_name\");",
											"pm.test(\"find matches account by name: \" + hub_name, function () {",
											"    const body = pm.response.json();",
											"    const found = body.data.find(d => d.attributes.name == hub_name);",
											"",
											"    pm.expect(found).to.not.be.undefined;",
											"    ",
											"    pm.environment.set(\"hub_id\", found.id);",
											"    pm.environment.set(\"account_id\", found.id.split(\"b.\").join(\"\"));",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"hub_id\");",
											"",
											"pm.variables.set(\"hub_name\", \"change to your hub/account name\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}/project/v1/hubs?filter[extension.type]=hubs:autodesk.bim360:Account",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"project",
										"v1",
										"hubs"
									],
									"query": [
										{
											"key": "filter[extension.type]",
											"value": "hubs:autodesk.bim360:Account"
										}
									]
								},
								"description": "Returns a collection of accessible hubs for this member.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-GET/"
							},
							"response": []
						},
						{
							"name": "GET one ACC project",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.environment.unset(\"project_id\");",
											"pm.environment.unset(\"project_id_without_b\");",
											"pm.environment.unset(\"review_id\");",
											"pm.environment.unset(\"version_id\");",
											"",
											"pm.variables.set(\"project_name\", \"change to your project name\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"// find the specified project and setup the environment variable \"project_id\"",
											"const project_name = pm.variables.get(\"project_name\") ",
											"pm.test(\"find matches project by name: \" + project_name, function () {",
											"    const body = pm.response.json();",
											"    const found = body.data.find(d => d.attributes.name == project_name)",
											"",
											"    pm.expect(found).to.not.be.undefined;",
											"    ",
											"    postman.setEnvironmentVariable(\"project_id\", found.id);",
											"    postman.setEnvironmentVariable(\"project_id_without_b\", found.id.split(\"b.\").join(\"\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_domain}}project/v1/hubs/{{hub_id}}/projects",
									"host": [
										"{{base_domain}}project"
									],
									"path": [
										"v1",
										"hubs",
										"{{hub_id}}",
										"projects"
									]
								},
								"description": "Returns a collection of projects for a given hub_id. A project represents a BIM 360 Team project, a Fusion Team project, a BIM 360 Docs project, or an A360 Personal project. Multiple projects can be created within a single hub.<br/>\nhttps://forge.autodesk.com/en/docs/data/v2/reference/http/hubs-hub_id-projects-GET/"
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "Approval Workflows",
					"item": [
						{
							"name": "Reviews - GET workflows",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody.results).to.be.an(\"array\");",
											"    // pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"",
											"    if(responseBody.results.length > 0) {",
											"        pm.environment.set(\"workflow_id\", responseBody.results[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-user-id",
										"value": "{{user_id}}",
										"description": "The ID of a user on whose behalf the request is made. Your application has access to all users specified by the administrator in the SaaS Integrations UI. Use this header to specify which user should be affected by the request.\nThis header is only required when using two-legged authentication. It is not needed for three-legged authentication.\n\nOnly user’s Autodesk ID (autodeskId) can be accepted.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_domain}}/construction/reviews/v1/projects/:projectId/workflows",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"construction",
										"reviews",
										"v1",
										"projects",
										":projectId",
										"workflows"
									],
									"query": [
										{
											"key": "limit",
											"value": "50",
											"description": "The maximum number of approval workflows to return in a single request. Possible values: 1-50. Maxium: 50. Default: 50. For example: limit=2.",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "0",
											"description": "The index at which the endpoint starts returning results. Used for pagination. Default: 0. For example: offset=10.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "name desc",
											"description": "Specifies a single field to sort the results by. The default order is ascending (asc); to sort in descending order, add desc. Possible sorting fields: name, status, updatedAt. For example: sort=name desc.",
											"disabled": true
										},
										{
											"key": "filter[initiator]",
											"value": "true",
											"description": "Filters the results based on who initiated the workflow. For example: filter[initiator]=true.\ntrue: return only workflows initiated by the current user. This filter is ignored if the user is a project admin.\n\nfalse: (default) return workflows regardless of who initiated them.\n\nNote that this filter cannot be used together with filter[status].",
											"disabled": true
										},
										{
											"key": "filter[status]",
											"value": "ACTIVE",
											"description": "Filters the results by workflow status. For example: filter[status]=INACTIVE. Possible values:\nACTIVE: return only active workflows.\n\nINACTIVE: return only inactive (disabled) workflows.\n\nDefault: ACTIVE.\n\nNote that this filter cannot be used together with filter[initiator].",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project.\nUse the Data Management API to retrieve the project ID. For more information, see the Retrieve a Project ID tutorial. You need to convert the project ID into a project ID for the ACC API by removing the “b.\" prefix. For example, a project ID of b.a4be0c34a-4ab7 translates to a project ID of a4be0c34a-4ab7."
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Reviews",
					"item": [
						{
							"name": "Reviews - GET reviews",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody.results).to.be.an(\"array\");",
											"    // pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"",
											"    if(responseBody.results.length > 0) {",
											"        pm.environment.set(\"review_id\", responseBody.results[0].id);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-user-id",
										"value": "{{user_id}}",
										"description": "The ID of a user on whose behalf the request is made. Your application has access to all users specified by the administrator in the SaaS Integrations UI. Use this header to specify which user should be affected by the request.\nThis header is only required when using two-legged authentication. It is not needed for three-legged authentication.\n\nOnly user’s Autodesk ID (autodeskId) can be accepted.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_domain}}/construction/reviews/v1/projects/:projectId/reviews",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"construction",
										"reviews",
										"v1",
										"projects",
										":projectId",
										"reviews"
									],
									"query": [
										{
											"key": "limit",
											"value": "2",
											"description": "The maximum number of reviews to retrieve.\nPossible values: 1-50. Maxium: 50. Default: 50. For example: limit=2.",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "10",
											"description": "The index of the first result to return (zero-based).\nDefault: 0. For example: offset=10.",
											"disabled": true
										},
										{
											"key": "sort",
											"value": "createdAt desc",
											"description": "Sorts the results by a single field.\nUse the format fieldName (ascending) or fieldName desc (descending).\n\nIf no direction is specified, sorting defaults to ascending.\n\nPossible values: name, status, sequenceId, currentStepDueDate, createdAt, finishedAt.\n\nFor example: sort=createdAt desc.",
											"disabled": true
										},
										{
											"key": "filter[workflowId]",
											"value": "497f6eca-6276-4993-bfeb-53cbbbba6f08",
											"description": "Filter by a specific approval workflow ID in URL-encoded format.\nFor example: filter[workflowId]=497f6eca-6276-4993-bfeb-53cbbbba6f08.",
											"disabled": true
										},
										{
											"key": "filter[status]",
											"value": "OPEN",
											"description": "Filter by the review status in URL-encoded format.\nPossible values: OPEN, CLOSED, VOID, FAILED.\n\nFor example: filter[status]=OPEN.\n\nReviews with status FAILED are only visible to project administrators.",
											"disabled": true
										},
										{
											"key": "filter[currentStepDueDate]",
											"value": "2023-06-01..2023-06-30",
											"description": "Filter by the due date of the current review step in URL-encoded format.\nProvide a date range using the format startDate..endDate.\n\nBoth values must be in ISO 8601 format.\n\nFor example: filter[updatedAt]=2023-06-01..2023-06-30.",
											"disabled": true
										},
										{
											"key": "filter[createdAt]",
											"value": "2023-06-01..2023-06-30",
											"description": "Filter by review creation date in URL-encoded format.\nProvide a date range using the format startDate..endDate.\n\nBoth values must be in ISO 8601 format.\n\nFor example: filter[createdAt]=2023-06-01..2023-06-30",
											"disabled": true
										},
										{
											"key": "filter[updatedAt]",
											"value": "2023-06-01..2023-06-30",
											"description": "Filter by the review’s last updated date in URL-encoded format.\nProvide a date range using the format startDate..endDate.\n\nBoth values must be in ISO 8601 format.\n\nFor example: filter[updatedAt]=2023-06-01..2023-06-30.",
											"disabled": true
										},
										{
											"key": "filter[finishedAt]",
											"value": "2023-06-01..2023-06-30",
											"description": "Filter by the date the review was finished, in URL-encoded format.\nProvide a date range using the format startDate..endDate.\n\nBoth values must be in ISO 8601 format.\n\nFor example: filter[finishedAt]=2023-06-01..2023-06-30.",
											"disabled": true
										},
										{
											"key": "filter[nextActionByUser]",
											"value": "A96JX8NUKRLVFWSR",
											"description": "Filter by Autodesk ID of a user responsible for the next action, in URL-encoded format.\nThis includes reviews assigned directly to the user or to their role or company.\n\nFor example: filter[nextActionByUser]=A96JX8NUKRLVFWSR.",
											"disabled": true
										},
										{
											"key": "filter[nextActionByRole]",
											"value": "1572818",
											"description": "Filter by Autodesk ID of a role responsible for the next action, in URL-encoded format.\nFor example: filter[nextActionByRole]=1572818.",
											"disabled": true
										},
										{
											"key": "filter[nextActionByCompany]",
											"value": "81768771",
											"description": "Filter by Autodesk ID of a company responsible for the next action, in URL-encoded format.\nFor example: filter[nextActionByCompany]=81768771.",
											"disabled": true
										},
										{
											"key": "filter[name]",
											"value": "Apartment Block A",
											"description": "Filter by review name in URL-encoded format.\nRetrieves reviews with names that contain the specified string (not case-sensitive).\n\nFor example: filter[name]=Apartment retrieves reviews like Apartment Block A and apartment_rendering",
											"disabled": true
										},
										{
											"key": "filter[sequenceId]",
											"value": "11",
											"description": "Filter by review sequence ID in URL-encoded format.\nRetrieves reviews with sequence IDs that partially match the specified number.\n\nFor example: filter[sequenceId]=11 may retrieve 113 and 211.",
											"disabled": true
										},
										{
											"key": "filter[archived]",
											"value": "false",
											"description": "Filter by archive status in URL-encoded format.\ntrue: retrieves only archived reviews.\n\nfalse: retrieves only active (non-archived) reviews.\n\nIf omitted, only active reviews are retrieved.\n\nFor example: filter[archived]=false.",
											"disabled": true
										},
										{
											"key": "filter[archivedBy]",
											"value": "A96JX8NUKRLVFWSR",
											"description": "Filter by the Autodesk ID of the user who archived the review, in URL-encoded format. To find the ID, call GET users.\nIt only takes effect when filter[archived]=true is also set.\n\nFor example: filter[archivedBy]=A96JX8NUKRLVFWSR.",
											"disabled": true
										},
										{
											"key": "filter[archivedAt]",
											"value": "2023-06-01..2023-06-30",
											"description": "Filter by the date the review was archived, in URL-encoded format.\nIt only applies if filter[archived]=true.\n\nProvide a date range using the format startDate..endDate.\n\nBoth values must be in ISO 8601 format.\n\nFor example: filter[archivedAt]=2023-06-01..2023-06-30.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project.\nUse the Data Management API to retrieve the project ID. For more information, see the Retrieve a Project ID tutorial. You need to convert the project ID into a project ID for the ACC API by removing the “b.\" prefix. For example, a project ID of b.a4be0c34a-4ab7 translates to a project ID of a4be0c34a-4ab7."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reviews - GET reviews/:reviewId/workflow",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"    pm.expect(responseBody).to.have.property(\"id\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-user-id",
										"value": "{{user_id}}",
										"description": "The ID of a user on whose behalf the request is made. Your application has access to all users specified by the administrator in the SaaS Integrations UI. Use this header to specify which user should be affected by the request.\nThis header is only required when using two-legged authentication. It is not needed for three-legged authentication.\n\nOnly user’s Autodesk ID (autodeskId) can be accepted.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_domain}}/construction/reviews/v1/projects/:projectId/reviews/:reviewId/workflow",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"construction",
										"reviews",
										"v1",
										"projects",
										":projectId",
										"reviews",
										":reviewId",
										"workflow"
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project.\nUse the Data Management API to retrieve the project ID. For more information, see the Retrieve a Project ID tutorial. You need to convert the project ID into a project ID for the ACC API by removing the “b.\" prefix. For example, a project ID of b.a4be0c34a-4ab7 translates to a project ID of a4be0c34a-4ab7."
										},
										{
											"key": "reviewId",
											"value": "{{review_id}}",
											"description": "The unique identifier (UUID) for the review. To find the review ID, call GET reviews."
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Reviews - GET reviews/:reviewId/versions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody.results).to.be.an(\"array\");",
											"    // pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"",
											"    if(responseBody.results.length > 0) {",
											"        pm.environment.set(\"file_version_urn\", responseBody.results[0].urn);",
											"    }",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-user-id",
										"value": "{{user_id}}",
										"description": "The ID of a user on whose behalf the request is made. Your application has access to all users specified by the administrator in the SaaS Integrations UI. Use this header to specify which user should be affected by the request.\nThis header is only required when using two-legged authentication. It is not needed for three-legged authentication.\n\nOnly user’s Autodesk ID (autodeskId) can be accepted.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_domain}}/construction/reviews/v1/projects/:projectId/reviews/:reviewId/versions",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"construction",
										"reviews",
										"v1",
										"projects",
										":projectId",
										"reviews",
										":reviewId",
										"versions"
									],
									"query": [
										{
											"key": "limit",
											"value": "2",
											"description": "The number of file versions to return in the response. Possible values: 1-50. Maxium: 50. Default: 50. For example: limit=2",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "10",
											"description": "The index of the first result to return (zero-based). Default: 0. For example: offset=10.",
											"disabled": true
										},
										{
											"key": "filter[approveStatus]",
											"value": "Approved",
											"description": "Filters the results based on the approval status assigned to each file during the review. It should be URL-encoded.\nThe filter applies to the label of the approval status, as defined in the workflow — not the internal value.\n\nFor example, if your workflow includes a status labeled Approved with comments, you would filter using that label:\n\nfilter[approveStatus]=Approved with comments.\n\nThis is especially useful when a workflow includes multiple approval options with customized labels.\n\nNote: It supports multiple values.\n\nFor example, if you want to filter with 2 labels: both Approved and Rejected, you could filter with the query string:\n\nfilter[approveStatus]=Approved&filter[approveStatus]=Rejected",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project.\nUse the Data Management API to retrieve the project ID. For more information, see the Retrieve a Project ID tutorial. You need to convert the project ID into a project ID for the ACC API by removing the “b.\" prefix. For example, a project ID of b.a4be0c34a-4ab7 translates to a project ID of a4be0c34a-4ab7."
										},
										{
											"key": "reviewId",
											"value": "{{review_id}}",
											"description": "The unique ID of the review. It must be in UUID format — not the numeric sequence ID shown in the Reviews UI. To find the review ID, call GET reviews."
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Versions",
					"item": [
						{
							"name": "Reviews - GET approval status of a file version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Content-Type header present and is application/json\", () => {",
											"    pm.response.to.have.header(\"Content-Type\");",
											"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
											"});",
											"",
											"pm.test(\"Response body is not empty\", () => {",
											"    var responseBody = pm.response.json();",
											"",
											"    pm.expect(responseBody.results).to.be.an(\"array\");",
											"    // pm.expect(responseBody.results && responseBody.results.length > 0).to.eql(true);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let versionUrn = pm.environment.get('file_version_urn');",
											"pm.variables.set('ecoded_file_version_urn', encodeURIComponent(versionUrn));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "x-user-id",
										"value": "{{user_id}}",
										"description": "The ID of a user on whose behalf the request is made. Your application has access to all users specified by the administrator in the SaaS Integrations UI. Use this header to specify which user should be affected by the request.\nThis header is only required when using two-legged authentication. It is not needed for three-legged authentication.\n\nOnly user’s Autodesk ID (autodeskId) can be accepted.",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{base_domain}}/construction/reviews/v1/projects/:projectId/versions/:versionId/approval-statuses",
									"host": [
										"{{base_domain}}"
									],
									"path": [
										"construction",
										"reviews",
										"v1",
										"projects",
										":projectId",
										"versions",
										":versionId",
										"approval-statuses"
									],
									"query": [
										{
											"key": "limit",
											"value": "2",
											"description": "The maximum number of results to return in the response. Possible values: 1–50. Maxium: 50. Default: 50. For example: limit=2.",
											"disabled": true
										},
										{
											"key": "offset",
											"value": "10",
											"description": "The number of results to skip from the beginning of the list. Used for pagination. Default: 0. For example: offset=10.",
											"disabled": true
										}
									],
									"variable": [
										{
											"key": "projectId",
											"value": "{{project_id_without_b}}",
											"description": "The ID of the project.\nUse the Data Management API to retrieve the project ID. For more information, see the Retrieve a Project ID tutorial. You need to convert the project ID into a project ID for the ACC API by removing the “b.\" prefix. For example, a project ID of b.a4be0c34a-4ab7 translates to a project ID of a4be0c34a-4ab7."
										},
										{
											"key": "versionId",
											"value": "{{ecoded_file_version_urn}}",
											"description": "The URL-encoded unique identifier (URN) of the specific file version you want to check the review and approval history for.\nTo find the latest version, call GET versions and check the urn field."
										}
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "oauth2",
		"oauth2": [
			{
				"key": "scope",
				"value": "data:read",
				"type": "string"
			},
			{
				"key": "clientSecret",
				"value": "{{client_secret}}",
				"type": "string"
			},
			{
				"key": "clientId",
				"value": "{{client_id}}",
				"type": "string"
			},
			{
				"key": "accessTokenUrl",
				"value": "{{base_domain}}authentication/v2/token",
				"type": "string"
			},
			{
				"key": "authUrl",
				"value": "{{base_domain}}authentication/v2/authorize",
				"type": "string"
			},
			{
				"key": "redirect_uri",
				"value": "https://www.postman.com/oauth2/callback",
				"type": "string"
			},
			{
				"key": "tokenName",
				"value": "3LO Access Token",
				"type": "string"
			},
			{
				"key": "addTokenTo",
				"value": "header",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}